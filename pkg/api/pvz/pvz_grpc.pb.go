// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: pvz.proto

package pvz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PVZ_AcceptOrder_FullMethodName           = "/pvz.PVZ/AcceptOrder"
	PVZ_ReturnOrder_FullMethodName           = "/pvz.PVZ/ReturnOrder"
	PVZ_GiveOrder_FullMethodName             = "/pvz.PVZ/GiveOrder"
	PVZ_GetOrders_FullMethodName             = "/pvz.PVZ/GetOrders"
	PVZ_ReturnOrderFromClient_FullMethodName = "/pvz.PVZ/ReturnOrderFromClient"
	PVZ_GetReturns_FullMethodName            = "/pvz.PVZ/GetReturns"
)

// PVZClient is the client API for PVZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZClient interface {
	AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*AcceptOrderResponse, error)
	ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error)
	GiveOrder(ctx context.Context, in *GiveOrderRequest, opts ...grpc.CallOption) (*GiveOrderResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	ReturnOrderFromClient(ctx context.Context, in *ReturnOrderFromClientRequest, opts ...grpc.CallOption) (*ReturnOrderFromClientResponse, error)
	GetReturns(ctx context.Context, in *GetReturnsRequest, opts ...grpc.CallOption) (*GetReturnsResponse, error)
}

type pVZClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZClient(cc grpc.ClientConnInterface) PVZClient {
	return &pVZClient{cc}
}

func (c *pVZClient) AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*AcceptOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_AcceptOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_ReturnOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) GiveOrder(ctx context.Context, in *GiveOrderRequest, opts ...grpc.CallOption) (*GiveOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiveOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_GiveOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, PVZ_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) ReturnOrderFromClient(ctx context.Context, in *ReturnOrderFromClientRequest, opts ...grpc.CallOption) (*ReturnOrderFromClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnOrderFromClientResponse)
	err := c.cc.Invoke(ctx, PVZ_ReturnOrderFromClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) GetReturns(ctx context.Context, in *GetReturnsRequest, opts ...grpc.CallOption) (*GetReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnsResponse)
	err := c.cc.Invoke(ctx, PVZ_GetReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServer is the server API for PVZ service.
// All implementations must embed UnimplementedPVZServer
// for forward compatibility
type PVZServer interface {
	AcceptOrder(context.Context, *AcceptOrderRequest) (*AcceptOrderResponse, error)
	ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error)
	GiveOrder(context.Context, *GiveOrderRequest) (*GiveOrderResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	ReturnOrderFromClient(context.Context, *ReturnOrderFromClientRequest) (*ReturnOrderFromClientResponse, error)
	GetReturns(context.Context, *GetReturnsRequest) (*GetReturnsResponse, error)
	mustEmbedUnimplementedPVZServer()
}

// UnimplementedPVZServer must be embedded to have forward compatible implementations.
type UnimplementedPVZServer struct {
}

func (UnimplementedPVZServer) AcceptOrder(context.Context, *AcceptOrderRequest) (*AcceptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedPVZServer) ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrder not implemented")
}
func (UnimplementedPVZServer) GiveOrder(context.Context, *GiveOrderRequest) (*GiveOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveOrder not implemented")
}
func (UnimplementedPVZServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedPVZServer) ReturnOrderFromClient(context.Context, *ReturnOrderFromClientRequest) (*ReturnOrderFromClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrderFromClient not implemented")
}
func (UnimplementedPVZServer) GetReturns(context.Context, *GetReturnsRequest) (*GetReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturns not implemented")
}
func (UnimplementedPVZServer) mustEmbedUnimplementedPVZServer() {}

// UnsafePVZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServer will
// result in compilation errors.
type UnsafePVZServer interface {
	mustEmbedUnimplementedPVZServer()
}

func RegisterPVZServer(s grpc.ServiceRegistrar, srv PVZServer) {
	s.RegisterService(&PVZ_ServiceDesc, srv)
}

func _PVZ_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).AcceptOrder(ctx, req.(*AcceptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_ReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).ReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_ReturnOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).ReturnOrder(ctx, req.(*ReturnOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_GiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).GiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_GiveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).GiveOrder(ctx, req.(*GiveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_ReturnOrderFromClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderFromClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).ReturnOrderFromClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_ReturnOrderFromClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).ReturnOrderFromClient(ctx, req.(*ReturnOrderFromClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_GetReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).GetReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_GetReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).GetReturns(ctx, req.(*GetReturnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZ_ServiceDesc is the grpc.ServiceDesc for PVZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.PVZ",
	HandlerType: (*PVZServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOrder",
			Handler:    _PVZ_AcceptOrder_Handler,
		},
		{
			MethodName: "ReturnOrder",
			Handler:    _PVZ_ReturnOrder_Handler,
		},
		{
			MethodName: "GiveOrder",
			Handler:    _PVZ_GiveOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _PVZ_GetOrders_Handler,
		},
		{
			MethodName: "ReturnOrderFromClient",
			Handler:    _PVZ_ReturnOrderFromClient_Handler,
		},
		{
			MethodName: "GetReturns",
			Handler:    _PVZ_GetReturns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pvz.proto",
}
