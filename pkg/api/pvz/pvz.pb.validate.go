// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz.proto

package pvz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderRequestMultiError, or nil if none found.
func (m *AcceptOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	// no validation rules for ClientID

	// no validation rules for Date

	// no validation rules for Price

	// no validation rules for Weight

	// no validation rules for Package

	if len(errors) > 0 {
		return AcceptOrderRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AcceptOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AcceptOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderRequestMultiError) AllErrors() []error { return m }

// AcceptOrderRequestValidationError is the validation error returned by
// AcceptOrderRequest.Validate if the designated constraints aren't met.
type AcceptOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderRequestValidationError) ErrorName() string {
	return "AcceptOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderRequestValidationError{}

// Validate checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderResponseMultiError, or nil if none found.
func (m *AcceptOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return AcceptOrderResponseMultiError(errors)
	}

	return nil
}

// AcceptOrderResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderResponseMultiError) AllErrors() []error { return m }

// AcceptOrderResponseValidationError is the validation error returned by
// AcceptOrderResponse.Validate if the designated constraints aren't met.
type AcceptOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderResponseValidationError) ErrorName() string {
	return "AcceptOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderResponseValidationError{}

// Validate checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderRequestMultiError, or nil if none found.
func (m *ReturnOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return ReturnOrderRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderRequestMultiError) AllErrors() []error { return m }

// ReturnOrderRequestValidationError is the validation error returned by
// ReturnOrderRequest.Validate if the designated constraints aren't met.
type ReturnOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderRequestValidationError) ErrorName() string {
	return "ReturnOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderRequestValidationError{}

// Validate checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderResponseMultiError, or nil if none found.
func (m *ReturnOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ReturnOrderResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type ReturnOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderResponseMultiError) AllErrors() []error { return m }

// ReturnOrderResponseValidationError is the validation error returned by
// ReturnOrderResponse.Validate if the designated constraints aren't met.
type ReturnOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderResponseValidationError) ErrorName() string {
	return "ReturnOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderResponseValidationError{}

// Validate checks the field values on GiveOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderRequestMultiError, or nil if none found.
func (m *GiveOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Orders

	// no validation rules for Package

	if len(errors) > 0 {
		return GiveOrderRequestMultiError(errors)
	}

	return nil
}

// GiveOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GiveOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GiveOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderRequestMultiError) AllErrors() []error { return m }

// GiveOrderRequestValidationError is the validation error returned by
// GiveOrderRequest.Validate if the designated constraints aren't met.
type GiveOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderRequestValidationError) ErrorName() string { return "GiveOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GiveOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderRequestValidationError{}

// Validate checks the field values on GiveOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderResponseMultiError, or nil if none found.
func (m *GiveOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for AmountToBePaid

	if len(errors) > 0 {
		return GiveOrderResponseMultiError(errors)
	}

	return nil
}

// GiveOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GiveOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GiveOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderResponseMultiError) AllErrors() []error { return m }

// GiveOrderResponseValidationError is the validation error returned by
// GiveOrderResponse.Validate if the designated constraints aren't met.
type GiveOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderResponseValidationError) ErrorName() string {
	return "GiveOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderResponseValidationError{}

// Validate checks the field values on GetOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersRequestMultiError, or nil if none found.
func (m *GetOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for Action

	if len(errors) > 0 {
		return GetOrdersRequestMultiError(errors)
	}

	return nil
}

// GetOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersRequestMultiError) AllErrors() []error { return m }

// GetOrdersRequestValidationError is the validation error returned by
// GetOrdersRequest.Validate if the designated constraints aren't met.
type GetOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersRequestValidationError) ErrorName() string { return "GetOrdersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersRequestValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	// no validation rules for ClientID

	// no validation rules for Condition

	if all {
		switch v := interface{}(m.GetArrivedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ArrivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ArrivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ArrivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for Package

	// no validation rules for MaxWeight

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on GetOrdersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersResponseMultiError, or nil if none found.
func (m *GetOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrdersResponseMultiError(errors)
	}

	return nil
}

// GetOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersResponseMultiError) AllErrors() []error { return m }

// GetOrdersResponseValidationError is the validation error returned by
// GetOrdersResponse.Validate if the designated constraints aren't met.
type GetOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersResponseValidationError) ErrorName() string {
	return "GetOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersResponseValidationError{}

// Validate checks the field values on ReturnOrderFromClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderFromClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderFromClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderFromClientRequestMultiError, or nil if none found.
func (m *ReturnOrderFromClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderFromClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	// no validation rules for ClientID

	if len(errors) > 0 {
		return ReturnOrderFromClientRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderFromClientRequestMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderFromClientRequest.ValidateAll() if
// the designated constraints aren't met.
type ReturnOrderFromClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderFromClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderFromClientRequestMultiError) AllErrors() []error { return m }

// ReturnOrderFromClientRequestValidationError is the validation error returned
// by ReturnOrderFromClientRequest.Validate if the designated constraints
// aren't met.
type ReturnOrderFromClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderFromClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderFromClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderFromClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderFromClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderFromClientRequestValidationError) ErrorName() string {
	return "ReturnOrderFromClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderFromClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderFromClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderFromClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderFromClientRequestValidationError{}

// Validate checks the field values on ReturnOrderFromClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderFromClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderFromClientResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReturnOrderFromClientResponseMultiError, or nil if none found.
func (m *ReturnOrderFromClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderFromClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ReturnOrderFromClientResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderFromClientResponseMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderFromClientResponse.ValidateAll()
// if the designated constraints aren't met.
type ReturnOrderFromClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderFromClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderFromClientResponseMultiError) AllErrors() []error { return m }

// ReturnOrderFromClientResponseValidationError is the validation error
// returned by ReturnOrderFromClientResponse.Validate if the designated
// constraints aren't met.
type ReturnOrderFromClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderFromClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderFromClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderFromClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderFromClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderFromClientResponseValidationError) ErrorName() string {
	return "ReturnOrderFromClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderFromClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderFromClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderFromClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderFromClientResponseValidationError{}

// Validate checks the field values on GetReturnsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsRequestMultiError, or nil if none found.
func (m *GetReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return GetReturnsRequestMultiError(errors)
	}

	return nil
}

// GetReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsRequestMultiError) AllErrors() []error { return m }

// GetReturnsRequestValidationError is the validation error returned by
// GetReturnsRequest.Validate if the designated constraints aren't met.
type GetReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsRequestValidationError) ErrorName() string {
	return "GetReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsRequestValidationError{}

// Validate checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsResponseMultiError, or nil if none found.
func (m *GetReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnsResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MaxPage

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return GetReturnsResponseMultiError(errors)
	}

	return nil
}

// GetReturnsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReturnsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsResponseMultiError) AllErrors() []error { return m }

// GetReturnsResponseValidationError is the validation error returned by
// GetReturnsResponse.Validate if the designated constraints aren't met.
type GetReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsResponseValidationError) ErrorName() string {
	return "GetReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsResponseValidationError{}
