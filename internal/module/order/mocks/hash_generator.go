// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mocks

//go:generate minimock -i HomeWork_1/internal/module.HashGenerator -o hash_generator.go -n HashGenerator -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HashGenerator implements module.HashGenerator
type HashGenerator struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerate          func() (s1 string)
	inspectFuncGenerate   func()
	afterGenerateCounter  uint64
	beforeGenerateCounter uint64
	GenerateMock          mHashGeneratorGenerate
}

// NewHashGenerator returns a mock for module.HashGenerator
func NewHashGenerator(t minimock.Tester) *HashGenerator {
	m := &HashGenerator{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateMock = mHashGeneratorGenerate{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHashGeneratorGenerate struct {
	optional           bool
	mock               *HashGenerator
	defaultExpectation *HashGeneratorGenerateExpectation
	expectations       []*HashGeneratorGenerateExpectation

	expectedInvocations uint64
}

// HashGeneratorGenerateExpectation specifies expectation struct of the HashGenerator.Generate
type HashGeneratorGenerateExpectation struct {
	mock *HashGenerator

	results *HashGeneratorGenerateResults
	Counter uint64
}

// HashGeneratorGenerateResults contains results of the HashGenerator.Generate
type HashGeneratorGenerateResults struct {
	s1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerate *mHashGeneratorGenerate) Optional() *mHashGeneratorGenerate {
	mmGenerate.optional = true
	return mmGenerate
}

// Expect sets up expected params for HashGenerator.Generate
func (mmGenerate *mHashGeneratorGenerate) Expect() *mHashGeneratorGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("HashGenerator.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &HashGeneratorGenerateExpectation{}
	}

	return mmGenerate
}

// Inspect accepts an inspector function that has same arguments as the HashGenerator.Generate
func (mmGenerate *mHashGeneratorGenerate) Inspect(f func()) *mHashGeneratorGenerate {
	if mmGenerate.mock.inspectFuncGenerate != nil {
		mmGenerate.mock.t.Fatalf("Inspect function is already set for HashGenerator.Generate")
	}

	mmGenerate.mock.inspectFuncGenerate = f

	return mmGenerate
}

// Return sets up results that will be returned by HashGenerator.Generate
func (mmGenerate *mHashGeneratorGenerate) Return(s1 string) *HashGenerator {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("HashGenerator.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &HashGeneratorGenerateExpectation{mock: mmGenerate.mock}
	}
	mmGenerate.defaultExpectation.results = &HashGeneratorGenerateResults{s1}
	return mmGenerate.mock
}

// Set uses given function f to mock the HashGenerator.Generate method
func (mmGenerate *mHashGeneratorGenerate) Set(f func() (s1 string)) *HashGenerator {
	if mmGenerate.defaultExpectation != nil {
		mmGenerate.mock.t.Fatalf("Default expectation is already set for the HashGenerator.Generate method")
	}

	if len(mmGenerate.expectations) > 0 {
		mmGenerate.mock.t.Fatalf("Some expectations are already set for the HashGenerator.Generate method")
	}

	mmGenerate.mock.funcGenerate = f
	return mmGenerate.mock
}

// Times sets number of times HashGenerator.Generate should be invoked
func (mmGenerate *mHashGeneratorGenerate) Times(n uint64) *mHashGeneratorGenerate {
	if n == 0 {
		mmGenerate.mock.t.Fatalf("Times of HashGenerator.Generate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerate.expectedInvocations, n)
	return mmGenerate
}

func (mmGenerate *mHashGeneratorGenerate) invocationsDone() bool {
	if len(mmGenerate.expectations) == 0 && mmGenerate.defaultExpectation == nil && mmGenerate.mock.funcGenerate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerate.mock.afterGenerateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Generate implements module.HashGenerator
func (mmGenerate *HashGenerator) Generate() (s1 string) {
	mm_atomic.AddUint64(&mmGenerate.beforeGenerateCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerate.afterGenerateCounter, 1)

	if mmGenerate.inspectFuncGenerate != nil {
		mmGenerate.inspectFuncGenerate()
	}

	if mmGenerate.GenerateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerate.GenerateMock.defaultExpectation.Counter, 1)

		mm_results := mmGenerate.GenerateMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerate.t.Fatal("No results are set for the HashGenerator.Generate")
		}
		return (*mm_results).s1
	}
	if mmGenerate.funcGenerate != nil {
		return mmGenerate.funcGenerate()
	}
	mmGenerate.t.Fatalf("Unexpected call to HashGenerator.Generate.")
	return
}

// GenerateAfterCounter returns a count of finished HashGenerator.Generate invocations
func (mmGenerate *HashGenerator) GenerateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.afterGenerateCounter)
}

// GenerateBeforeCounter returns a count of HashGenerator.Generate invocations
func (mmGenerate *HashGenerator) GenerateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.beforeGenerateCounter)
}

// MinimockGenerateDone returns true if the count of the Generate invocations corresponds
// the number of defined expectations
func (m *HashGenerator) MinimockGenerateDone() bool {
	if m.GenerateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMock.invocationsDone()
}

// MinimockGenerateInspect logs each unmet expectation
func (m *HashGenerator) MinimockGenerateInspect() {
	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to HashGenerator.Generate")
		}
	}

	afterGenerateCounter := mm_atomic.LoadUint64(&m.afterGenerateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMock.defaultExpectation != nil && afterGenerateCounter < 1 {
		m.t.Error("Expected call to HashGenerator.Generate")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerate != nil && afterGenerateCounter < 1 {
		m.t.Error("Expected call to HashGenerator.Generate")
	}

	if !m.GenerateMock.invocationsDone() && afterGenerateCounter > 0 {
		m.t.Errorf("Expected %d calls to HashGenerator.Generate but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMock.expectedInvocations), afterGenerateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HashGenerator) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HashGenerator) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HashGenerator) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateDone()
}
